import{_ as i,c as a,o as e,a2 as l}from"./chunks/framework.Cw_AIpAc.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/Web前端笔记/01_HTML+CSS/01. 网页显示过程、浏览器内核、为什么需要做适配.md","filePath":"front-end/Web前端笔记/01_HTML+CSS/01. 网页显示过程、浏览器内核、为什么需要做适配.md"}'),s={name:"front-end/Web前端笔记/01_HTML+CSS/01. 网页显示过程、浏览器内核、为什么需要做适配.md"},t=l(`<h2 id="一-软件和应用程序的区别" tabindex="-1">一. 软件和应用程序的区别 <a class="header-anchor" href="#一-软件和应用程序的区别" aria-label="Permalink to &quot;一. 软件和应用程序的区别&quot;">​</a></h2><h3 id="_1-软件" tabindex="-1">1. 软件 <a class="header-anchor" href="#_1-软件" aria-label="Permalink to &quot;1. 软件&quot;">​</a></h3><ul><li>专业的软件定义 <ul><li>一系列按照特定顺序组织的<strong>计算机数据和指令</strong>，是电脑的<strong>非有型部分</strong>。(有型：硬件，非有型：软件)</li></ul></li><li>软件开发是什么 <ul><li>微信、抖音、王者、浏览器、淘宝、美团、<code>ppt</code>、<code>vscode</code> 等</li><li>就是告诉计算机一系列的指令，这些指令也称之为程序</li></ul></li></ul><h3 id="_2-应用程序" tabindex="-1">2. 应用程序 <a class="header-anchor" href="#_2-应用程序" aria-label="Permalink to &quot;2. 应用程序&quot;">​</a></h3><ul><li><p>应用程序是什么</p><ul><li><p>给用户用的称之为应用程序，是一堆程序组成的</p></li></ul></li></ul><h2 id="二-一个完善的应用系统包含哪些环节" tabindex="-1">二. 一个完善的应用系统包含哪些环节 <a class="header-anchor" href="#二-一个完善的应用系统包含哪些环节" aria-label="Permalink to &quot;二. 一个完善的应用系统包含哪些环节&quot;">​</a></h2><ul><li>服务器开发</li><li><code>ios</code> 开放、<code>Android</code> 开发</li><li><code>web</code> 开发</li><li>桌面开发 （ <code>window</code>、<code>mac os</code> )</li></ul><h3 id="_1-服务器开发" tabindex="-1">1. 服务器开发 <a class="header-anchor" href="#_1-服务器开发" aria-label="Permalink to &quot;1. 服务器开发&quot;">​</a></h3><ul><li><code>java</code>、<code>nodejs</code>、<code>c++</code>、<code>Go</code>、<code>pyhton </code></li></ul><h3 id="_2-客户端开发" tabindex="-1">2. 客户端开发 <a class="header-anchor" href="#_2-客户端开发" aria-label="Permalink to &quot;2. 客户端开发&quot;">​</a></h3><ul><li><code>Android</code> 端（<code>java</code>、<code>kotlin </code>）</li><li><code>iPhone</code> 端 (<code>Objective-C</code> 、<code>Swift </code>)</li><li><code>iPad</code> 端 （<code>Android</code> 端 、<code>ios</code> 端 ）</li><li>网页开发 (<code>html</code>、<code>css</code>、<code>javascript</code>)</li><li><code>PC</code> 客户端 （<code>c#</code>）</li><li><code>Mac OS</code> 端 (<code>Objective-C</code>、<code>Swift</code>)</li></ul><h2 id="三-网页从编写到浏览器显示的整个过程" tabindex="-1">三. 网页从编写到浏览器显示的整个过程 <a class="header-anchor" href="#三-网页从编写到浏览器显示的整个过程" aria-label="Permalink to &quot;三. 网页从编写到浏览器显示的整个过程&quot;">​</a></h2><h3 id="_1-网页的显示过程-用户角度" tabindex="-1">1. 网页的显示过程 - 用户角度 <a class="header-anchor" href="#_1-网页的显示过程-用户角度" aria-label="Permalink to &quot;1. 网页的显示过程 - 用户角度&quot;">​</a></h3><ol><li><p>用户在浏览器<strong>输入一个网站地址</strong></p></li><li><p>浏览器会<strong>找到对应的服务器地址，请求静态资源</strong>（可以存放在世界上任何一个地方）</p></li><li><p><strong>服务器返回静态资源给浏览器</strong></p></li><li><p><strong>浏览器对静态资源进行解析和展示</strong></p></li></ol><h3 id="_2-网页的显示过程-前端工程师" tabindex="-1">2. 网页的显示过程 - 前端工程师 <a class="header-anchor" href="#_2-网页的显示过程-前端工程师" aria-label="Permalink to &quot;2. 网页的显示过程 - 前端工程师&quot;">​</a></h3><ol><li><strong>开发项目</strong> （<code>html</code> / <code>css</code> / <code>js</code> / <code>vue</code> / <code>react</code>）</li><li><strong>打包、部署项目</strong>到服务器里面</li></ol><h3 id="_3-输入-url-到页面展示的过程" tabindex="-1">3. 输入 URL 到页面展示的过程 <a class="header-anchor" href="#_3-输入-url-到页面展示的过程" aria-label="Permalink to &quot;3. 输入 URL 到页面展示的过程&quot;">​</a></h3><ol><li>输入 <code>xxx.com</code> 域名</li><li>经过 <code>dns</code> 服务器(<code>domain name system</code>)解析，找到对应的 <code>ip</code> 地址</li><li>根据 <code>ip</code> 地址找到对应的服务器(主机)，建立 <code>tcp</code> 连接，发送 <code>http</code> 请求</li><li>服务器响应请求，将存储的 <code>html</code>/<code>css</code>/<code>js</code> 等静态资源返回给浏览器</li><li>浏览器下载对应资源</li><li>浏览器渲染引擎解析 <code>html</code>/<code>css</code>，<code>v8</code> 引擎解析 <code>js</code> 代码</li><li>最终渲染（显示）页面展示给用户</li></ol><h2 id="四-什么是服务器" tabindex="-1">四. 什么是服务器 <a class="header-anchor" href="#四-什么是服务器" aria-label="Permalink to &quot;四. 什么是服务器&quot;">​</a></h2><h3 id="_1-定义" tabindex="-1">1. 定义 <a class="header-anchor" href="#_1-定义" aria-label="Permalink to &quot;1. 定义&quot;">​</a></h3><ul><li>服务器本质上也是一台类似电脑一样的主机</li></ul><h3 id="_2-特点" tabindex="-1">2. 特点 <a class="header-anchor" href="#_2-特点" aria-label="Permalink to &quot;2. 特点&quot;">​</a></h3><ul><li>二十四小时不关机的（稳定运行）</li><li>没有显示器的</li><li>一般装的是 <code>linux</code> 操作系统（比如 <code>centos</code>）</li></ul><h2 id="五-网页的三大组成部分及对应的作用" tabindex="-1">五. 网页的三大组成部分及对应的作用 <a class="header-anchor" href="#五-网页的三大组成部分及对应的作用" aria-label="Permalink to &quot;五. 网页的三大组成部分及对应的作用&quot;">​</a></h2><h3 id="_1-发展历史" tabindex="-1">1. 发展历史 <a class="header-anchor" href="#_1-发展历史" aria-label="Permalink to &quot;1. 发展历史&quot;">​</a></h3><ul><li>阶段一：只有 <code>html</code> 元素</li><li>阶段二：<code>html</code> 元素 + <code>css</code> 样式</li><li>阶段三(目前处于)：<code>html</code> 元素 + <code>css</code> 样式 + <code>javascript</code> 语言</li></ul><h3 id="_2-三大组成部分" tabindex="-1">2. 三大组成部分 <a class="header-anchor" href="#_2-三大组成部分" aria-label="Permalink to &quot;2. 三大组成部分&quot;">​</a></h3><ul><li><code>html</code> + <code>css</code> + <code>javascript</code></li></ul><h3 id="_3-各自作用" tabindex="-1">3. 各自作用 <a class="header-anchor" href="#_3-各自作用" aria-label="Permalink to &quot;3. 各自作用&quot;">​</a></h3><ul><li><code>html</code> 网页的内容结构</li><li><code>css</code> 网页的视觉体验</li><li><code>javascript</code> 网页的交互处理</li></ul><h2 id="六-什么是浏览器内核-常见的浏览器内核有哪些" tabindex="-1">六. 什么是浏览器内核，常见的浏览器内核有哪些 <a class="header-anchor" href="#六-什么是浏览器内核-常见的浏览器内核有哪些" aria-label="Permalink to &quot;六. 什么是浏览器内核，常见的浏览器内核有哪些&quot;">​</a></h2><h3 id="_1-浏览器内核是什么" tabindex="-1">1. 浏览器内核是什么 <a class="header-anchor" href="#_1-浏览器内核是什么" aria-label="Permalink to &quot;1. 浏览器内核是什么&quot;">​</a></h3><ul><li>浏览器最核心的部分是 <strong>渲染引擎</strong>（<code>Rendering Engine</code>），一般也称为 &quot; 浏览器内核 &quot;</li><li>负责<strong>解析网页语法</strong>，并<strong>渲染网页</strong></li></ul><h3 id="_2-常见的浏览器内核" tabindex="-1">2. 常见的浏览器内核 <a class="header-anchor" href="#_2-常见的浏览器内核" aria-label="Permalink to &quot;2. 常见的浏览器内核&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">内核</th><th style="text-align:left;">浏览器</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Trident </code>（三叉戟）</td><td style="text-align:left;"><code>IE</code>、360 安全浏览器、搜狗高速浏览器、百度浏览器、UC 浏览器</td></tr><tr><td style="text-align:left;"><code>Gecko</code>（壁虎）</td><td style="text-align:left;"><code>Mozilla Firefox</code> （火狐）</td></tr><tr><td style="text-align:left;"><code>Presto</code>（急板乐曲）=&gt; <code>Blink</code>（眨眼）</td><td style="text-align:left;"><code>Opera</code></td></tr><tr><td style="text-align:left;"><code>WebKit</code></td><td style="text-align:left;"><code>Safari</code>、移动端浏览器（<code>Android</code>、<code>ios</code>）、360 极速浏览器、搜狗高速浏览器</td></tr><tr><td style="text-align:left;"><code>WebKit</code>（分支优化）=&gt; <code>Blink</code>（目前渲染最快）</td><td style="text-align:left;"><code>Google Chrome</code>、<code>Edge</code></td></tr></tbody></table><h3 id="_3-为什么需要做浏览器的适配" tabindex="-1">3. 为什么需要做浏览器的适配 <a class="header-anchor" href="#_3-为什么需要做浏览器的适配" aria-label="Permalink to &quot;3. 为什么需要做浏览器的适配&quot;">​</a></h3><ul><li>因为<strong>不同的浏览器内核有不同的解析、渲染规则</strong>，所以<strong>同一网页在不同内核的浏览器中的渲染效果可能不一样</strong></li></ul><h2 id="七-html-页面的基本结构" tabindex="-1">七. HTML 页面的基本结构 <a class="header-anchor" href="#七-html-页面的基本结构" aria-label="Permalink to &quot;七. HTML 页面的基本结构&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 一般是用来放网页的元数据(metadata, 描述数据的数据) --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;网页标题&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!-- 网页的主体内容 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="八-元素的结构是什么-有哪些单标签元素、双标签元素" tabindex="-1">八. 元素的结构是什么，有哪些单标签元素、双标签元素 <a class="header-anchor" href="#八-元素的结构是什么-有哪些单标签元素、双标签元素" aria-label="Permalink to &quot;八. 元素的结构是什么，有哪些单标签元素、双标签元素&quot;">​</a></h2><h3 id="_1-什么是元素-element-呢" tabindex="-1">1. 什么是元素(Element)呢？ <a class="header-anchor" href="#_1-什么是元素-element-呢" aria-label="Permalink to &quot;1. 什么是元素(Element)呢？&quot;">​</a></h3><ul><li>元素是网页的一部分</li><li>一个元素可以包含一个数据项，或是一块文本，或是一张图片，亦或是什么也不包含</li></ul><h3 id="_2-元素的本质" tabindex="-1">2. 元素的本质 <a class="header-anchor" href="#_2-元素的本质" aria-label="Permalink to &quot;2. 元素的本质&quot;">​</a></h3><ul><li><strong>元素本质上就是浏览器给其加了一些默认的 <code>css</code> 属性罢了</strong></li><li>那既然默认可以加，那我们也是<strong>可以用别的元素去设置一些 <code>css</code> 属性去替代相应的元素的</strong>，所以<strong>一些元素之间是可以相互实现的</strong></li><li><strong>大多数元素本质上是一样的，只不过是 <code>css</code> 属性不一样罢了</strong>（<code>img</code> 元素除外）</li><li>例如：<code>h1</code> 元素就是浏览器给其加了一些默认的 <code>css</code> 属性罢了，我们自然可以用 <code>div</code> 元素加上一些对应的 <code>css</code> 属性去代替 <code>h1</code> 元素</li></ul><h3 id="_3-元素的结构" tabindex="-1">3. 元素的结构 <a class="header-anchor" href="#_3-元素的结构" aria-label="Permalink to &quot;3. 元素的结构&quot;">​</a></h3><ul><li><p>开始标签（<code>opening tag</code>）: 包含元素的名称，被左右尖括号所包围。表示元素从这里开始或者开始起作用</p></li><li><p>结束标签（<code>closing tag</code>）: 与开始标签相似，只是其在元素名之前多包含了一个斜杠。这表示元素的结尾</p></li><li><p>内容（<code>content</code>）: 元素的内容</p></li><li><p>元素（<code>Element</code>）: 开始标签、结束标签与内容相结合，便是一个完整的元素</p></li></ul><h3 id="_4-常见的单双标签元素" tabindex="-1">4. 常见的单双标签元素 <a class="header-anchor" href="#_4-常见的单双标签元素" aria-label="Permalink to &quot;4. 常见的单双标签元素&quot;">​</a></h3><ul><li>双标签元素：<code>html</code>、<code>body</code>、<code>head</code>、<code>h2</code>、<code>p</code>、<code>a</code>、<code>div</code>、...</li><li>单标签元素：<code>br</code>、<code>img</code>、<code>hr</code>、<code>meta</code>、<code>input</code>、...</li></ul><h3 id="_5-元素的属性" tabindex="-1">5. 元素的属性 <a class="header-anchor" href="#_5-元素的属性" aria-label="Permalink to &quot;5. 元素的属性&quot;">​</a></h3><ul><li><p>元素也可以拥有属性（<code>Attribute</code>）</p></li><li><p>属性包含元素的额外信息，这些信息不会出现在实际的内容中</p></li><li><p>一个属性必须包含如下内容：</p><ul><li><p>一个空格，在属性和元素名称之间（如果已经有一个或多个属性，就与前一个属性之间有一个空格）</p></li><li><p>属性名称，后面跟着一个等号 <code>=</code></p></li><li><p>一个属性值，用一对引号 <code>&quot; &quot;</code> 引起来</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- &lt;h1 属性名=&quot;属性值&quot;&gt;我是一级标题&lt;/h1&gt; --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我是一级标题&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul></li></ul><h3 id="_6-元素属性的分类" tabindex="-1">6. 元素属性的分类 <a class="header-anchor" href="#_6-元素属性的分类" aria-label="Permalink to &quot;6. 元素属性的分类&quot;">​</a></h3><ul><li><strong>有些属性是公共的，每一个元素都可以设置</strong><ul><li>如 <code>class</code>、<code>id</code>、<code>title</code> 属性</li></ul></li><li><strong>有些属性是元素特有的，不是每一个元素都可以设置</strong><ul><li>比如 <code>meta</code> 元素的 <code>charset</code> 属性、<code>img</code> 元素的 <code>alt</code> 属性等</li></ul></li></ul><blockquote><p>注意：</p><ul><li><strong><code>HTML</code> 元素不区分大小写，推荐小写</strong></li><li>在 <code>xml</code> 语法中，单标签是需要写 <code>/</code> 反斜杠的，但是现在统一不需要加反斜杠了</li><li><strong><code>img</code></strong> 元素是一种特殊元素，<strong>别名：可替换元素</strong>（<code>replace Element</code>）</li></ul></blockquote><h2 id="九-元素之间的关系" tabindex="-1">九. 元素之间的关系 <a class="header-anchor" href="#九-元素之间的关系" aria-label="Permalink to &quot;九. 元素之间的关系&quot;">​</a></h2><h3 id="_1-元素的嵌套关系" tabindex="-1">1. 元素的嵌套关系 <a class="header-anchor" href="#_1-元素的嵌套关系" aria-label="Permalink to &quot;1. 元素的嵌套关系&quot;">​</a></h3><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 元素的内容除了可以是文本，还能是其他元素 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- alt + shift + 向下箭头 =&gt; 快速复制元素 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;aaa&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;bbb&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_2-元素之间的关系" tabindex="-1">2. 元素之间的关系 <a class="header-anchor" href="#_2-元素之间的关系" aria-label="Permalink to &quot;2. 元素之间的关系&quot;">​</a></h3><ul><li>父子关系：上述代码中，<code>ul</code> (父) 和 <code>li</code> (子) ， <code>div</code> (父) 和 <code>span</code> (子)</li><li>兄弟关系：上述代码中，两个 <code>li</code> 是兄弟关系，两个 <code>span</code> 兄弟关系</li></ul><h2 id="十-注释的作用-html-的注释如何编写" tabindex="-1">十. 注释的作用，HTML 的注释如何编写 <a class="header-anchor" href="#十-注释的作用-html-的注释如何编写" aria-label="Permalink to &quot;十. 注释的作用，HTML 的注释如何编写&quot;">​</a></h2><h3 id="_1-什么是注释" tabindex="-1">1. 什么是注释 <a class="header-anchor" href="#_1-什么是注释" aria-label="Permalink to &quot;1. 什么是注释&quot;">​</a></h3><ul><li><p>注释就是一段代码的说明</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 注释内容 --&gt;</span></span></code></pre></div></li><li><p>注释是只给开发者看的，浏览器不会把注释显示给用户看</p></li></ul><h3 id="_2-注释的意义" tabindex="-1">2. 注释的意义 <a class="header-anchor" href="#_2-注释的意义" aria-label="Permalink to &quot;2. 注释的意义&quot;">​</a></h3><ul><li>帮助理清代码思路，方便以后进行查阅</li><li>与他人合作开发时，可以减少沟通成本</li><li>开发自己的开源框架时，方便别人使用和学习</li><li>可以临时注释掉一段代码，方便调试</li><li>快捷键：<code>ctrl</code> + <code>/</code></li></ul>`,63),o=[t];function d(n,h,c,r,p,k){return e(),a("div",null,o)}const u=i(s,[["render",d]]);export{E as __pageData,u as default};
